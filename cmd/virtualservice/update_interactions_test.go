package virtualservice_test

import (
	"bufio"
	"os"
)

/*
 These interactions are generated using [autoplay](https://github.com/coryb/autoplay)
 The command used was:
    autoplay -n interactive.go glooctl virtualservice update

 The interaction was copy and pasted from generated interactive.go
*/
func interactionUpdateDomains(buf *bufio.Reader, fh *os.File) {
	expect("\x1b[0G\x1b[2K\x1b[1;92m? \x1b[0m\x1b[1;99mPlease select the virtual service to edit:\x1b[0m  \x1b[36m[Use arrows to move, type to filter]\x1b[0m\r\n", buf)
	expect("\x1b[1;36m‚ùØ axhixh.com\x1b[0m\r\n", buf)
	expect("\x1b[?25l", buf)
	fh.Write([]byte("\r"))
	expect("\x1b[?25h\x1b[0G\x1b[2K\x1b[1F\x1b[2K\x1b[1F\x1b[2K\x1b[1;92m? \x1b[0m\x1b[1;99mPlease select the virtual service to edit:\x1b[0m\x1b[36m axhixh.com\x1b[0m\r\n", buf)
	expect("Domains: axhixh.com, www.axhixh.com\r\n", buf)
	expect("\r\n", buf)
	expect("\r\n", buf)
	expect("\x1b[0G\x1b[2K\x1b[1;92m? \x1b[0m\x1b[1;99mDo you want to replace the existing domains? \x1b[0m\x1b[37m(y/N) \x1b[0m\x1b[?25l\x1b7\x1b[999;999f\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("1"))
	fh.Write([]byte("7"))
	fh.Write([]byte("2"))
	fh.Write([]byte("R"))
	expect("\x1b8\x1b[?25h", buf)
	fh.Write([]byte("y"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("5"))
	fh.Write([]byte("4"))
	fh.Write([]byte("R"))
	expect("y", buf)
	fh.Write([]byte("\r"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("5"))
	fh.Write([]byte("5"))
	fh.Write([]byte("R"))
	expect("\x1b[1D\r\n", buf)
	expect("\x1b[1E\x1b[1F\x1b[0G\x1b[2K\x1b[1;92m? \x1b[0m\x1b[1;99mDo you want to replace the existing domains? \x1b[0m\x1b[36mYes\x1b[0m\r\n", buf)
	expect("\x1b[0G\x1b[2K\x1b[1;92m? \x1b[0m\x1b[1;99mPlease enter a comma separated list of domains (leave empty to set none): \x1b[0m\x1b[?25l\x1b7\x1b[999;999f\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("1"))
	fh.Write([]byte("7"))
	fh.Write([]byte("2"))
	fh.Write([]byte("R"))
	expect("\x1b8\x1b[?25h", buf)
	fh.Write([]byte("a"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("7"))
	fh.Write([]byte("7"))
	fh.Write([]byte("R"))
	expect("a", buf)
	fh.Write([]byte("x"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("7"))
	fh.Write([]byte("8"))
	fh.Write([]byte("R"))
	expect("x", buf)
	fh.Write([]byte("h"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("7"))
	fh.Write([]byte("9"))
	fh.Write([]byte("R"))
	expect("h", buf)
	fh.Write([]byte("i"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("8"))
	fh.Write([]byte("0"))
	fh.Write([]byte("R"))
	expect("i", buf)
	fh.Write([]byte("x"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("8"))
	fh.Write([]byte("1"))
	fh.Write([]byte("R"))
	expect("x", buf)
	fh.Write([]byte("h"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("8"))
	fh.Write([]byte("2"))
	fh.Write([]byte("R"))
	expect("h", buf)
	fh.Write([]byte("."))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("8"))
	fh.Write([]byte("3"))
	fh.Write([]byte("R"))
	expect(".", buf)
	fh.Write([]byte("n"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("8"))
	fh.Write([]byte("4"))
	fh.Write([]byte("R"))
	expect("n", buf)
	fh.Write([]byte("e"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("8"))
	fh.Write([]byte("5"))
	fh.Write([]byte("R"))
	expect("e", buf)
	fh.Write([]byte("t"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("8"))
	fh.Write([]byte("6"))
	fh.Write([]byte("R"))
	expect("t", buf)
	fh.Write([]byte(","))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("8"))
	fh.Write([]byte("7"))
	fh.Write([]byte("R"))
	expect(",", buf)
	fh.Write([]byte(" "))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("8"))
	fh.Write([]byte("8"))
	fh.Write([]byte("R"))
	expect(" ", buf)
	fh.Write([]byte("w"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("8"))
	fh.Write([]byte("9"))
	fh.Write([]byte("R"))
	expect("w", buf)
	fh.Write([]byte("w"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("9"))
	fh.Write([]byte("0"))
	fh.Write([]byte("R"))
	expect("w", buf)
	fh.Write([]byte("w"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("9"))
	fh.Write([]byte("1"))
	fh.Write([]byte("R"))
	expect("w", buf)
	fh.Write([]byte("."))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("9"))
	fh.Write([]byte("2"))
	fh.Write([]byte("R"))
	expect(".", buf)
	fh.Write([]byte("a"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("9"))
	fh.Write([]byte("3"))
	fh.Write([]byte("R"))
	expect("a", buf)
	fh.Write([]byte("x"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("9"))
	fh.Write([]byte("4"))
	fh.Write([]byte("R"))
	expect("x", buf)
	fh.Write([]byte("h"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("9"))
	fh.Write([]byte("5"))
	fh.Write([]byte("R"))
	expect("h", buf)
	fh.Write([]byte("i"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("9"))
	fh.Write([]byte("6"))
	fh.Write([]byte("R"))
	expect("i", buf)
	fh.Write([]byte("x"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("9"))
	fh.Write([]byte("7"))
	fh.Write([]byte("R"))
	expect("x", buf)
	fh.Write([]byte("h"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte("R"))
	expect("h", buf)
	fh.Write([]byte("."))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("9"))
	fh.Write([]byte("9"))
	fh.Write([]byte("R"))
	expect(".", buf)
	fh.Write([]byte("n"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("1"))
	fh.Write([]byte("0"))
	fh.Write([]byte("0"))
	fh.Write([]byte("R"))
	expect("n", buf)
	fh.Write([]byte("e"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("1"))
	fh.Write([]byte("0"))
	fh.Write([]byte("1"))
	fh.Write([]byte("R"))
	expect("e", buf)
	fh.Write([]byte("t"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("1"))
	fh.Write([]byte("0"))
	fh.Write([]byte("2"))
	fh.Write([]byte("R"))
	expect("t", buf)
	fh.Write([]byte("\r"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("1"))
	fh.Write([]byte("0"))
	fh.Write([]byte("3"))
	fh.Write([]byte("R"))
	expect("\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\x1b[1D\r\n", buf)
	expect("\x1b[1E\x1b[1F\x1b[0G\x1b[2K\x1b[1;92m? \x1b[0m\x1b[1;99mPlease enter a comma separated list of domains (leave empty to set none): \x1b[0m\x1b[36maxhixh.net, www.axhixh.net\x1b[0m\r\n", buf)
	expect("\x1b[0G\x1b[2K\x1b[1;92m? \x1b[0m\x1b[1;99mDo you want to set SSL configuration? \x1b[0m\x1b[37m(y/N) \x1b[0m\x1b[?25l\x1b7\x1b[999;999f\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("1"))
	fh.Write([]byte("7"))
	fh.Write([]byte("2"))
	fh.Write([]byte("R"))
	expect("\x1b8\x1b[?25h", buf)
	fh.Write([]byte("n"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("4"))
	fh.Write([]byte("7"))
	fh.Write([]byte("R"))
	expect("n", buf)
	fh.Write([]byte("\r"))
	expect("\x1b[6n", buf)
	fh.Write([]byte("\x1b"))
	fh.Write([]byte("["))
	fh.Write([]byte("9"))
	fh.Write([]byte("8"))
	fh.Write([]byte(";"))
	fh.Write([]byte("4"))
	fh.Write([]byte("8"))
	fh.Write([]byte("R"))
	expect("\x1b[1D\r\n", buf)
	expect("\x1b[1E\x1b[1F\x1b[0G\x1b[2K\x1b[1;92m? \x1b[0m\x1b[1;99mDo you want to set SSL configuration? \x1b[0m\x1b[36mNo\x1b[0m\r\n", buf)
	expect("+-----------------+-----------------------------+-----+--------+---------+------------+----------+--------+-------------+----------+-----------+\r\n", buf)
	expect("| VIRTUAL SERVICE |           DOMAIN            | SSL | STATUS | MATCHER |    TYPE    |   VERB   | HEADER |  UPSTREAM   | FUNCTION | EXTENSION |\r\n", buf)
	expect("+-----------------+-----------------------------+-----+--------+---------+------------+----------+--------+-------------+----------+-----------+\r\n", buf)
	expect("| axhixh.com      | axhixh.net,  www.axhixh.net |     |        | /bar    | Exact Path | GET POST |        | my-upstream |          |           |\r\n", buf)
	expect("+-----------------+-----------------------------+-----+--------+---------+------------+----------+--------+-------------+----------+-----------+\r\n", buf)
}
